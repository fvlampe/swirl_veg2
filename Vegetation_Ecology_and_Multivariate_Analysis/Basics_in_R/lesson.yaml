- Class: meta
  Course: Vegetation Ecology and Multivariate Analysis
  Lesson: Basics with R
  Author: Friedemann von Lampe, based on courses by Nick Carchedi and RLab Team
  Type: Standard
  Organization: Georg-August-University GÃ¶ttingen
  Version: 2.4.5

- Class: text
  Output: Welcome to the introductory R lesson of the course "Vegetation Ecology and Multivariate Analysis". 
    In this lesson you can familiarise yourself with the basic functions of R.
    To continue, you can place the cursor in the "Console" (that is the window at the bottom left, in which 
    you are reading this text) behind the three dots "..." and then press the "Enter" key.

- Class: text
  Output: If at any point you have questions or problems, please don't hesitate to ask the lecturer and assistants.
  
- Class: text
  Output: 'First, a few brief notes on how this "swirl"-course works. 
    In the following, you will be asked various questions and information will be displayed. 
    Depending on what you are shown, you can proceed in different ways. Sometimes you can continue by pressing "Enter".        Sometimes it is necessary to enter a function or letters, 
    that answers a multiple-choice question. To continue, press the "Enter" key.'
    
- Class: text
  Output: 'If you want to end a lesson, you can do this at any time. To do this, you can either type bye() into the 
    Console and confirm with Enter (if you are asked to enter something into the Console) or press the Esc key (when there     is no prompt but only text). If one of these functions does not work, try the other variant. In this way you end the 
    the package "swirl". To start "swirl" again, type swirl(). Your progress is saved, so you can always continue the last     lesson at the same point where you stopped. 
    Now, lets start with the course!
    Press "Enter" to continue.'

- Class: cmd_question
  Output: In its simplest form, R can be used as an interactive calculator. You can use the operators plus (+), minus (-), times (*) and divided (/). Why don't you try it out right now and type 1+2 into the console and then confirm your input with "Enter"? 
  CorrectAnswer: 1+2
  AnswerTests: omnitest(correctExpr='1+2', correctVal= '3')
  Hint: To use R as a calculator, you can use the operators mentioned. 
    You can now pass the simple addition 1+2 to R as an example. To do this, you can type 1+2 
    into the console and then press the "Enter" key.
    
- Class: text
  Output: 'As you can see, R gives you the result in the console. The calculation you passed to 
    R is shown in blue above the result, the result is shown in black in the line below. 
    Press "Enter" to continue.'

- Class: text
  Output: 'If you want to use certain results more often, it can be very helpful to save the results in 
    so-called "objects". An object, similar to a file, has a name that you can use to easily access 
    the result of a calculation, a series of numbers or a table. You can name an object anything you like 
    e.g. with "x" or "my_object" or ...'
    
- Class: cmd_question
  Output: 'You create an object by assigning the name of the calculation using the assignment arrow <-.
    This looks like this, for example: x <- 1+2. You are assigning the value on the right side of the arrow 
    to the variable name on the left side of the arrow. The result "3" is then saved as "x".
    You can now try this out and create the object x. Assign to it, as described,
    the calculation 1+2. You can type the calculation into the console and press "Enter" to pass it to R.'
  CorrectAnswer: x <- 1+2
  AnswerTests: omnitest(correctExpr= 'x <- 1+2'); expr_creates_var('x')
  Hint: 'As described, you can assign names to objects using <-. In this case the 
    object is called x and the calculation to be stored in the object is 1+2. The complete definition of the
    bject then looks like this: x <- 1+2. It is important to include a single space on each side of
    the assignment operator, but do NOT put a space between the "<" and the "-" that form the arrow.'

- Class: text
  Output: You'll notice that R did not print the result of 3 this time. When you
    use the assignment operator, R assumes that you don't want to see the result immediately,
    but rather that you intend to use the result for something else later on. 
    You can see that object x has been created by looking at the top right of the 
    window under "(Global) Environment". It is now stored in the so-called workspace. 
    All the objects you have defined for a session are stored there.
    
- Class: cmd_question
  Output: 'To view the contents of the variable x, just type x and press Enter. Pay attention to 
    case-sensitive, because X is different from x for R. Try it now.'
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Type x and press Enter. This will automatically print the value of x.

- Class: text
  Output: It is important to know that you can overwrite an object, e.g. x, 
    by assigning a new value or a new calculation to x. For example, if you were to enter x <- 6, 
    the previous calculation would be overwritten. 
    However, please do not do this! For the further calculations, we'll need the object x <- 1+2. 
    Just press "Enter" to continue.' 
    
- Class: cmd_question
  Output: It is possible to calculate directly with objects. You can now try this out. 
    For this purpose, the new object should be called "y" and contain the calculation x*300 + 100.  
    Why don't you try it out and type or copy y <- x*300 + 100 into the console and then confirm with "Enter"?
  CorrectAnswer: y <- x*300 + 100
  AnswerTests: omnitest(correctExpr='y <- x*300 + 100')
  Hint: To assign x*100 to the object "y", you can type y <- x*300 + 100 into the console or copy it. 
    and press "Enter.


- Class: cmd_question
  Output: What is the value of y? Type y to find out.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Type y and press Enter.
  

- Class: cmd_question
  Output: Now you can calculate with the objects "x" and "y". To do this, type or copy x*y into the 
    Console and confirm your entry with "Enter".
  CorrectAnswer: x*y
  AnswerTests: omnitest(correctExpr='x*y')
  Hint: Please type or copy x*y into the console and confirm your entry with "Enter".


- Class: text
  Output: As you can see, the objects x and y have been multiplied. Now, let's create a small collection of numbers called
    a vector. Any object that contains data is called a data structure and numeric vectors are the simplest
    type of data structure in R. In fact, even a single number is considered a vector
    of length one.

- Class: cmd_question
  Output: The easiest way to create a vector is with the c() function, which stands
    for 'concatenate' or 'combine'. We want to create a vector containing the numbers 1.1,
    9, 4, 5 and 6. In the case of number sequences, each number does not need to be specified 
    individually. The first and last and a colon in between are sufficient, e.g. 4:6 is 4, 5 and 6.
    So we can type c(1.1, 9, 4:6). Try it now and store the result in a variable called z.
  CorrectAnswer: z <- c(1.1, 9, 4:6)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 4:6)')
  Hint: Inputting z <- c(1.1, 9, 4:6) will assign the vector c(1.1, 9, 4, 5, 6) to a
    new variable called z. Including single spaces after the commas in the vector
    is not required, but helps make your code less cluttered and more readable.


- Class: cmd_question
  Output: Anytime you have questions about a particular function, you can access R's
    built-in help files via the `?` command. For example, if you want more information
    on the c() function, type ?c without the parentheses that normally follow a function
    name. Give it a try.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Type ?c and press Enter. This will bring up the help file for the c() function.
  
- Class: text
  Output: As you can see, the help text is displayed at the bottom right of the RStudio window. 
    It shows the command itself, the options for using it and what else you should be aware of when using it.
    Particularly helpful are the "examples" because they always work and can be used as a starting point for your 
    own adaptations. So you can always copy the "example" into your R script and try it out. 
    In RStudio you can also use the search-function in the "Help"-Tab of the bottom-right pane to search for functions.

- Class: cmd_question
  Output: Look at the "Environment"-pane. You will see the new object there, as well as an indicator of the 
    data type (numeric), the length (5) and a preview. Type z to view its contents. Notice that there are no commas 
    separating the values in the output.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Type z and press Enter to view its contents.

- Class: cmd_question
  Output: You can combine vectors to make a new vector. Create a new vector that contains
    z, 555, then z again in that order. Don't assign this vector to a new variable,
    so that we can just see the result immediately.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Type c(z, 555, z). Don't create a new variable. We just want to view the result.

- Class: cmd_question
  Output: 'Numeric vectors can be used in arithmetic expressions. Type the following
    to see what happens: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Enter z * 2 + 100, without assigning the result to a variable. The `*` symbol
    is used for multiplication.

- Class: text
  Output: First, R multiplied each of the five elements in z by 2. Then it added
    100 to each element to get the result you see above.

- Class: text
  Output: Further arithmetic operators are `^` (where x^2
    means 'x squared'). To take the square root, use the sqrt() function and to take
    the absolute value, use the abs() function.

- Class: cmd_question
  Output: Take the square root of z - 1 and assign it to a new variable called my_sqrt.
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: Assign the result of sqrt(z - 1) to a variable called my_sqrt.

- Class: mult_question
  Output: Before we view the contents of the my_sqrt variable, what do you think it
    contains?
  CorrectAnswer: a vector of length 5
  AnswerChoices: a vector of length 5; a single number (i.e a vector of length 1);
    a vector of length 0 (i.e. an empty vector)
  AnswerTests: omnitest(correctVal='a vector of length 5')
  Hint: 'Think about how R handled the other ''vectorized'' operations: element-by-element.'

- Class: cmd_question
  Output: Print the contents of my_sqrt.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Just type my_sqrt and press Enter to view its value.

- Class: text
  Output: As you may have guessed, R first subtracted 1 from each element of z, then
    took the square root of each element. This leaves you with a vector of the same
    length as the original vector z.

- Class: cmd_question
  Output: Now, create a new variable called my_div that gets the value of z divided
    by my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: Enter my_div <- z / my_sqrt. The spaces on either side of the `/` sign are not
    required, but can often improve readability by making code appear less cluttered.
    In the end, it's personal preference.

- Class: mult_question
  Output: Which statement do you think is true?
  CorrectAnswer: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...
  AnswerChoices: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...; my_div is a single number (i.e a
    vector of length 1); my_div is undefined
  AnswerTests: omnitest(correctVal='The first element of my_div is equal to the first
    element of z divided by the first element of my_sqrt, and so on...')
  Hint: Think about how R handled the other 'vectorized' operations like `+` and `*`.

- Class: cmd_question
  Output: Go ahead and print the contents of my_div.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Type my_div and press Enter to see its contents.

- Class: text
  Output: When given two vectors of the same length, R simply performs the specified
    arithmetic operation (`+`, `-`, `*`, etc.) element-by-element. If the vectors
    are of different lengths, R 'recycles' the shorter vector until it is the same
    length as the longer vector.

- Class: text
  Output: When we did z * 2 + 100 in our earlier example, z was a vector of length
    5, but technically 2 and 100 are each vectors of length 1.

- Class: text
  Output: 'Behind the scenes, R is ''recycling'' the 2 to make a vector of 2s and
    the 100 to make a vector of 100s. In other words, when you ask R to compute z
    * 2 + 100, what it really computes is this: z * c(2, 2, 2, 2, 2) + c(100, 100, 100, 100, 100).'


- Class: cmd_question
  Output: To see another example of how this vector 'recycling' works, try adding
    c(1, 2, 3, 4) and c(0, 10). Don't worry about saving the result in a new variable.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: any_of_exprs('c(1, 2, 3, 4) + c(0, 10)', 'c(1:4) + c(0, 10)')
  Hint: Enter c(1, 2, 3, 4) + c(0, 10) in the console to see how R adds two vectors
    of different length. Don't assign the result to a variable.

- Class: text
  Output: If the length of the shorter vector does not divide evenly into the length
    of the longer vector, R will still apply the 'recycling' method, but will throw
    a warning to let you know something fishy might be going on.

- Class: cmd_question
  Output: R can logarithmise with the function "log()". You have already learned the possibility 
    to call up the help integrated in R with the help of the ? followed by a function name. 
    help integrated in R. You can now display the help entry for the function "log"!
  CorrectAnswer: ?log
  AnswerTests: any_of_exprs('?log', '?log()')
  Hint: 'You can call up the help using ? We are looking for help on the function "log". The 
    correct input is as follows: ?log. Type or copy this into the console and then 
    then send your input to R with the "Enter" key.'
    

- Class: cmd_question
  Output: 'Using the help-page: Try to find out the function for the (common) decadic logarithm. Calculate the decadic logarithm of our vector y.'
  CorrectAnswer:  log10(y)
  AnswerTests: omnitest(correctExpr='log10(y)')
  Hint: The function for the decadic logarithm is log10. Type or copy log10(y) into the console and send the input with "Enter".
  
- Class: text
  Output: 'As you can see, R has now formed the logarithm of the previously defined object y to the base 10.
  Press "Enter" to continue.'

- Class: cmd_question
  Output: 'Not defined calculations output the letters "NaN" or "Inf", which in R 
  is an abbreviation for "Not a Number" or "Infinity". A "not defined"" calculation is e.g.
  dividing by zero. The division sign in R is the horizontal bar
  "/". You can now provoke the output of NaN by dividing zero by
  zero.'
  CorrectAnswer: 0/0
  AnswerTests: omnitest(correctExpr='0/0')
  Hint: 'You can enter 0/0 in the console and send the calculation to R with "Enter".'

- Class: cmd_question
  Output: A similar example is the output of NA values. Please type or copy z[6] into the console and confirm your entry with "Enter"..
  CorrectAnswer: z[6]
  AnswerTests: omnitest(correctExpr= 'z[6]')

- Class: text
  Output: 'As you can see, this calculation produces the output "NA". "NA" stands for "Not Available" and indicates missing 
    values. The reason is the object "z". Previously, you assigned the object z to a vector that contains three values. 
    Square brackets, as in the function above, are used to display individual elements of a vector.
    In this case you have let R output the 6th value of the object "z". Since the vector contains only 5 
    values, in this case R gives you the information by means of "NA" that there is no numerical value for this.' 

- Class: cmd_question
  Output: 'Finally, here are a few more examples of functions: Sine, exponents and the number Pi. First you can calculate
    the area of a circle with a radius of 5 cm. You call the number Pi with "pi", the "^" sign is used for exponentiation.
    If you do not know the function for calculating the area of a circle from the head, you can look it up on the internet.
    Now please type in your idea for calculating the area of the circle and then confirm with "Enter".'
  CorrectAnswer: pi*5^2
  AnswerTests: omnitest(correctExpr='pi*5^2')
  Hint: 'The formula for calculating the area of a circle is pi times the squared radius, pi*r^2.
    To calculate the area of a circle with a radius of 5 cm, you can type pi*5^2 into the 
    Console or copy it and pass it to R with "Enter".'

- Class: cmd_question
  Output: 'The sine function in R is sin(). You can test it by calculating the sine of 
    90.'
  CorrectAnswer: sin(90)
  AnswerTests: omnitest(correctExpr='sin(90)')
  Hint: Copy or type sin(90) into the console and confirm with "Enter".

- Class: text
  Output: 'A note on the syntax of R code: As already discussed, 
    R is "case sensitive". This means that upper and lower case letters are distinguished, e.g. X is not x. 
    Dealing with blanks, on the other hand, requires less attention; they can be inserted almost anywhere without 
    without causing error messages. Usually code with more spaces is clearer and easier to read.'

- Class: mult_question
  Output: 'Until now we dealt only with numeric vectors. Other types of vectors include logical, character or
    integer. What do you think is an integer vector? (Use google if you have no idea)'
  AnswerChoices: 'a vector which contains only whole numbers;
    a vector which contains only real numbers;
    a vector of lenght 1;
    a vector with integrity'
  CorrectAnswer: 'a vector which contains only whole numbers'
  AnswerTests: omnitest(correctVal='a vector which contains only whole numbers')
  Hint: 'Try to look here: https://en.wikipedia.org/wiki/Integer'
    
- Class: text
  Output: 'Now we want to have closer look at logical and character vectors.'
  
- Class: text
  Output: Logical vectors can contain the values TRUE, FALSE, and NA (for 'not available').
    These values are generated as the result of logical 'conditions'. Let's experiment
    with some simple conditions.
    
    
- Class: cmd_question
  Output: Earlier we created the numeric vector z. Now create a variable called tf that gets the result of z < 5, which
    is read as 'z is less than 5'.
  CorrectAnswer: tf <- z < 5
  AnswerTests: omnitest(correctExpr='tf <- z < 5')
  Hint: Use tf <- z < 5 to assign the result of z < 5 to a variable
    called tf.
    
- Class: mult_question
  Output: What do you think tf will look like?
  CorrectAnswer: a vector of 5 logical values
  AnswerChoices: a vector of 5 logical values; a single logical value
  AnswerTests: omnitest(correctVal='a vector of 5 logical values')
  Hint: Remember what you learned about vector arithmetic? The theme was that R performs many
    operations on an element-by-element basis. We called these 'vectorized' operations.
    
- Class: cmd_question
  Output: Print the contents of tf now.
  CorrectAnswer: tf
  AnswerTests: omnitest(correctExpr='tf')
  Hint: Just type tf and press Enter to view the its value.

- Class: text
  Output: The statement z < 5 is a condition and tf tells us whether each corresponding
    element of our numeric vector z satisfies this condition. The first element of z is 1.1, which is less than 5 and therefore
    the statement 1.1 < 5 is TRUE. The second element of z is 9, which is
    greater than 5, so the statement 9 < 5 is FALSE. The same logic applies for the
    third and fourth elements.
    
- Class: cmd_question
  Output: Let's try another. Type z >= 6 without assigning the result to a
    new variable.
  CorrectAnswer: z >= 6
  AnswerTests: omnitest(correctExpr='z >= 6')
  Hint: Don't create a new variable on this one. We just want to see the result of
    z >= 6. Make sure there is no space between the `>` and `=` symbols. Think
    of them as one symbol representing 'greater than or equal to'.

- Class: text
  Output: This time, we are asking whether each individual element of z is
    greater than OR equal to 6. Since only 9 and 6 are greater than or equal to 6,
    only these elements are TRUE (compare at the preview in the RStudio environment).
    
- Class: text
  Output: The `<` and `>=` symbols in these examples are called 'logical operators'.
    Other logical operators include `>`, `<=`, `==` for exact equality, and `!=` for
    inequality. We well need them often e.g. for subsetting our dataset. 
    
- Class: text
  Output: Character vectors are also very common in R. Double quotes are used to distinguish
    character objects, as in the following example.

- Class: cmd_question
  Output: 'Create a character vector that contains the following words: "I", "like",
    "R". Remember to enclose each word in its own set of double quotes, so that
    R knows they are character strings. Store the vector in a variable called my_char.'
  CorrectAnswer: my_char <- c("I", "like", "R")
  AnswerTests: omnitest(correctExpr='my_char <- c("I", "like", "R")')
  Hint: Type my_char <- c("I", "like", "R") to create a new variable called my_char
    that contains a character vector of length 3. Make sure that the commas separating
    the words are OUTSIDE of the double quotes, or else R thinks the commas are part
    of the words.
    
- Class: cmd_question
  Output: Print the contents of my_char to see what it looks like.
  CorrectAnswer: my_char
  AnswerTests: omnitest(correctExpr='my_char')
  Hint: Type my_char to view its contents.
  
- Class: text
  Output: Very nice, hope that we can deepen your friendship with R in this course. To sum up, you know
    four data types now: numeric (continuous variables, which can take on an infinite number of values), 
    integer (discrete variables, which can only take on a finite number of values = whole numbered), 
    character and logical. A vector can contain any of these data types, but only one single data type 
    per vector. You are almost finished with the basics. 
    
- Class: mult_question
  Output: 'Last but not least, a final topic: the workspace. You have heard about this earlier.
    Do you remember what the workspace is? 
    Choose an answer.'
  AnswerChoices: 'The workspace is the control panel in R that you type into...;
    The workspace is the working memory and includes the entirety of your data, tables, vectors, etc. that are active in R.;
    The workspace is a function that you can execute in R.;
    Workspace is another word for vector.'
  CorrectAnswer: 'The workspace is the working memory and includes the entirety of your data, tables, vectors, etc. that are active in R.'
  AnswerTests: omnitest(correctVal='The workspace is the working memory and includes the entirety of your data, tables, vectors, etc. that are active in R.')
  Hint: 'Workspace can be translated as "working space". What could it contain or what could be its function?'
    
- Class: text
  Output: 'The workspace comprises the totality of your data, tables, vectors, etc. that are 
    active in R. This is displayed in the "(Global) Environment" in the upper right pane in RStudio. 
    The "Global Environment" is the environment associated with the workspace.
    When you are asked to load data into your Global Environment you should load data into the workspace. 
    For simplicity, you can consider these terms as synonymous.
    If you look at the environment, you can see all objects, that you created during this lesson.
    Press "Enter" to continue.'
    
- Class: mult_question
  Output: 'It can happen that the workspace remains after R is closed. 
    This means: R then saves e.g. individual variable names that you have defined and keeps them.
    Why might it make sense to "clean up" or delete the workspace before each work?'
  AnswerChoices: 'Because otherwise R cannot be used;To not keep old data in the workspace that could interfere.'
  CorrectAnswer: 'To not keep old data in the workspace that could interfere.'
  AnswerTests: omnitest(correctVal='To not keep old data in the workspace that could interfere.')
  Hint: What could be problematic about keeping old data, e.g. if defined vectors persist?
  
  
- Class: text
  Output: 'Exactly. If your workspace remains, this can lead to the fact that you, for example, 
    mistakenly use data from a previous session for your calculations.
    That is why it is always good to start with a blank sheet - that means to clean up the workspace.
    Press "Enter" to continue.'
    
- Class: cmd_question
  Output:  So always remember to clean up the workspace first. Let's do it now. 
    Type or copy the command rm(list = ls()) into the console, 
    and then send it with the "Enter" key.
  CorrectAnswer: rm(list = ls())
  AnswerTests: omnitest(correctExpr=rm(list = ls()))
  Hint: 'Type or copy the command rm(list = ls()) into the console, 
    and then send it with the "Enter" key. To copy, mark the text 
    the text with the cursor, press "Ctrl" and "C" at the same time. To paste 
    place the cursor behind the ">" sign in the console and press "Ctrl" and "V" at the same time.'
    
    
- Class: mult_question
  Output: Lets check whether the emptying of the workspace was successful. 
    Look at the environment pane in RStudio - is it empty?
  AnswerChoices: 'Yes; No'
  CorrectAnswer: 'Yes'
  AnswerTests: omnitest(correctVal='Yes')
  Hint: 'Really?'
    
- Class: text
  Output: Thanks for cleaning! If you don't want to use the code for cleaning up the workspace, you can also click on the
    broom symbol in the RStudio environment pane. This will clear all objects from the workspace. 


- Class: text
  Output: 'Congratulations! You have now successfully completed the first lesson "Basics with R".
    If you have any questions or problems: Please ask the lecturers!'
    
    
    
    



