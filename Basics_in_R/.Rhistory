summary(m1b.a.f)
# Interaktion n.s., also Modell ohne Interaktion
m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + (1|site), family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
# Interaktion n.s., also Modell ohne Interaktion
m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + (1|layer), family = "poisson",  data = ad.sites.a.to.f)
# Interaktion n.s., also Modell ohne Interaktion
m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + (1 | layer), family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
# Interaktion n.s., also Modell ohne Interaktion
m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
plot(m1b.a.f)
plot(allEffects(m1b.a.f))
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer, family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
library(effects)
library(lme4)
# Artenzahl ~ distance sites A-F
ad.sites.a.to.f <- ad.long %>%
filter(site %in% c("A","B","C","D","E","F"))
# Test auf Normalverteilung der Daten der Spalte "alpha.diversität" NICHT normalverteilt
shapiro.test(ad.sites.a.to.f$'alpha.diversity')
# Interaktion n.s., also Modell ohne Interaktion
m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
library(effects)
library(lme4)
# Artenzahl ~ distance sites A-F
ad.sites.a.to.f <- ad.long %>%
filter(site %in% c("A","B","C","D","E","F"))
# Test auf Normalverteilung der Daten der Spalte "alpha.diversität" NICHT normalverteilt
shapiro.test(ad.sites.a.to.f$'alpha.diversity')
# Interaktion n.s., also Modell ohne Interaktion
#m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer, family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
View(ad.sites.a.to.f)
library(tidyverse)
library(vegan)
library(pgirmess)
setwd("C:\\Users\\Friedemann Goral\\OneDrive - GWDG\\Uni\\Lehre\\Abschlussarbeiten\\Kim Gross - Samenbank")
orig.MA.data <- read_csv("2021-09-01-WORK-Masterarbeit_Aufnahmebogen.csv",
col_types = cols(
date = col_date(),
id = col_double(),
sample = col_character(),
prick.nr = col_double(),
species = col_character(),
removed = col_double(),
pricked = col_double(),
like = col_double(),
underneath = col_double(),
comment = col_character(),
nachbestimmen = col_character()
)
)
# 1. tidy data
tidy.MA.data <- orig.MA.data %>%      # assign orig.MA.data to new object tidy.MA.data
rename(`individuals` = removed) %>% # rename column "removed" to "individuals"
select(date:individuals) %>%        # select relevant columns: date, sample, prick.nr, species, individuals
filter(individuals >= 1) %>%        # drop all rows with individuals = NA, these rows contain info's like: pricked, like, underneath, comment
filter(species %in%
c("Agrostis capillaris",
"Calamagrostis epigejos",
"Calluna vulgaris",
"Cardamine flexuosa",
"Carex leporina",
"Carex pilulifera",
"Digitalis purpurea",
"Epilobium parviflorum",
"Galium saxatile",
"Holcus mollis",
"Hypericum humifusum",
"Hypericum pulchrum",
"Juncus bufonius",
"Oxalis stricta",
"Rubus fruticosus agg.",
"Rubus idaeus",
"Rumex obtusifolius",
"Scrophularia nodosa",
"Senecio sylvaticus",
"Teucrium scorodonia")) %>% # select relevant species/rows (Neue-Hute species only) and drop all others
mutate(sample = str_replace_all(string = sample, pattern = "[*]", replacement = ""))  # remove "*" in column sample to be able to sum first        and second sample. There are two samples (G5a* and H4a*) where no second sample could be collected due to not enough material
# Change A3a/01, A3a/02, A3s/03 and A3a/04 into A3a
# Während der Beobachtungsphase liefen in der Probe A3a so viele Keimlinge auf, dass die Probe auf 4 Töpfchen aufgeteilt wurde zum besseren     Ansprechen und beobachten der Keimlinge
tidy.MA.data$sample[tidy.MA.data$sample == "A3a/01"] <- "A3a"
tidy.MA.data$sample[tidy.MA.data$sample == "A3a/02"] <- "A3a"
tidy.MA.data$sample[tidy.MA.data$sample == "A3a/03"] <- "A3a"
tidy.MA.data$sample[tidy.MA.data$sample == "A3a/04"] <- "A3a"
# 2. add missing samples
sample.table.wide <- read_csv("data/sample.table.wide.csv") #import sample table wide
sample.table.long <- sample.table.wide %>%
pivot_longer(c(-1), names_to = "sample", values_to = "individuals") %>%  # pivot wide format into long format
mutate(date = "NA" , id = "NA", prick.nr = "NA") %>%  # add missing columns: date, id, PrickNr
select(date, id, sample, prick.nr, species, individuals) # reorder columns to match order of tidy.MA.data can also be done by name using sample.table.long[c( ,"date", "id", "sample", "prick.nr", "species", "individuals")] or by index using sample.table.long[ ,c(4, 5, 2, 6, 1, 3)]
write_csv(sample.table.long, "data/sample.table.long.csv")
sample.table.long <- read_csv("data/sample.table.long.csv",
col_types = cols(
date = col_date(),
id = col_double(),
sample = col_character(),
prick.nr = col_double(),
species = col_character(),
individuals = col_double()
)
)
tidy.MA.data <- union(tidy.MA.data, sample.table.long)  # unite table tidy.MA.data and sample.table.long
# 3. Save as csv "tidy.MA.data.csv", containing tidy MA-Data and missing samples due to no occurrence of relevant species
write_csv(tidy.MA.data, "data/tidy.MA.data.csv")
# create abundance.long
abundance.long <- select(tidy.MA.data, sample, species, individuals) # drop columns: date, id, prick.nr
# do I need to sum the individuals per sample in abundance.long or is it okay if samples occurr several times
# create abundance.wide by pivoting and sum individuals per sample
abundance.wide <- abundance.long %>%
group_by(sample,species) %>%
summarise(individuals = sum(individuals)) %>%
pivot_wider(names_from = sample, values_from = individuals, values_fill = 0)
#create abundance.long with the added columns: species, sample, present, site, layer, stump.dist.cm, spot, scarp.dist
abundance.long <- abundance.long %>%
mutate(site = sample) %>% # add column site
mutate(site = str_replace_all(string = site, pattern = "[0,1,2,3,4,5,a,b,c,x,y,z]", replacement = "")) %>%
mutate(layer = sample) %>% # add column layer
mutate(layer = str_replace_all(string = layer, pattern = "[A,B,C,D,E,F,G,H,i,J,0,1,2,3,4,5]", replacement = "")) %>%
mutate(layer = str_replace_all(string = layer, pattern = "[x,y,z]", replacement = "b")) %>%
mutate(stump.dist.cm = sample) %>% # add column stump.dist.cm
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "[A,B,C,D,E,F,G,H,a,b,c,x,y,z]", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i1", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i2", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i3", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J1", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J2", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J3", replacement = "")) %>% # is there a shorter solution?
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "0", replacement = "a")) %>% # numbers -> letters -> distances
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "1", replacement = "b")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "2", replacement = "c")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "3", replacement = "d")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "4", replacement = "e")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "5", replacement = "f"))  %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "c", replacement = "105")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "a", replacement = "35")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "b", replacement = "70")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "d", replacement = "140")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "e", replacement = "175")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "f", replacement = "210")) %>%
mutate(spot = sample) %>% # add column spot
mutate(spot = str_replace_all(string = spot, pattern = "[i,J,a,b,c,x,y,z,0,4,5]", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "[A,B,C,D,E,F,G,H]", replacement = "")) %>%
mutate(scarp.dist = sample) %>% # add column scarp.dist
mutate(scarp.dist = str_replace_all(string = scarp.dist, pattern = "[A,B,C,D,E;F,G,H,i,J,N,0,1,2,3,4,5,6,7,8,9,a,b,c]", replacement = ""))
# save abundance.wide and abundance.long tables as .csv
write_csv(abundance.wide, "data/abundance.wide.csv")
write_csv(abundance.long, "data/abundance.long.csv")
ind.long <- abundance.wide %>%
pivot_longer(c(-1), names_to = "sample", values_to = "individuals") %>%
mutate(site = sample) %>% # add column site categorical variable
mutate(site = str_replace_all(string = site, pattern = "[0,1,2,3,4,5,a,b,c,x,y,z]", replacement = "")) %>%
mutate(layer = sample) %>% # add column layer categorical variable can I turn it into continual variable
mutate(layer = str_replace_all(string = layer, pattern = "[A,B,C,D,E,F,G,H,i,J,0,1,2,3,4,5]", replacement = "")) %>%
mutate(layer = str_replace_all(string = layer, pattern = "[x,y,z]", replacement = "b")) %>%
mutate(stump.dist.cm = sample) %>% # add column stump.dist.cm continual variable
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "[A,B,C,D,E,F,G,H,a,b,c,x,y,z]", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i1", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i2", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i3", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J1", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J2", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J3", replacement = "")) %>% # is there a shorter solution?
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "0", replacement = "a")) %>% # numbers -> letters -> distances
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "1", replacement = "b")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "2", replacement = "c")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "3", replacement = "d")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "4", replacement = "e")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "5", replacement = "f"))  %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "c", replacement = "105")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "a", replacement = "35")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "b", replacement = "70")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "d", replacement = "140")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "e", replacement = "175")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "f", replacement = "210")) %>%
mutate(stump.dist.cm = as.integer(stump.dist.cm)) %>%
mutate(spot = sample) %>% # add column spot continual variable or categorical?
mutate(spot = str_replace_all(string = spot, pattern = "[i,J,a,b,c,x,y,z,0,4,5]", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "[A,B,C,D,E,F,G,H]", replacement = "")) %>%
mutate(scarp.dist = sample) %>% # add column scarp.dist continual variable or do I have to make it categorical
mutate(scarp.dist = str_replace_all(string = scarp.dist, pattern = "[A,B,C,D,E;F,G,H,i,J,N,0,1,2,3,4,5,6,7,8,9,a,b,c]", replacement = ""))
# save ind.long as .csv
write_csv(ind.long, "data/ind.long.csv")
pat.wide <- abundance.wide                   # abundance.wide data in new object
pat.wide[,-1] <- ifelse(pat.wide[,-1]>0,1,0)      # change abundance in presence-absence-data 1/0
pat.long <- pat.wide %>%
pivot_longer(c(-1 ), names_to = "sample", values_to = "present",  names_repair = "unique")
pat.long <- pat.long %>%
mutate(site = sample) %>% # add column site categorical variable
mutate(site = str_replace_all(string = site, pattern = "[0,1,2,3,4,5,a,b,c,x,y,z]", replacement = "")) %>%
mutate(layer = sample) %>% # add column layer categorical variable can I turn it into continual variable
mutate(layer = str_replace_all(string = layer, pattern = "[A,B,C,D,E,F,G,H,i,J,0,1,2,3,4,5]", replacement = "")) %>%
mutate(layer = str_replace_all(string = layer, pattern = "[x,y,z]", replacement = "b")) %>%
mutate(stump.dist.cm = sample) %>% # add column stump.dist.cm continual variable
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "[A,B,C,D,E,F,G,H,a,b,c,x,y,z]", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i1", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i2", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i3", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J1", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J2", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J3", replacement = "")) %>% # is there a shorter solution?
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "0", replacement = "a")) %>% # numbers -> letters -> distances
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "1", replacement = "b")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "2", replacement = "c")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "3", replacement = "d")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "4", replacement = "e")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "5", replacement = "f"))  %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "c", replacement = "105")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "a", replacement = "35")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "b", replacement = "70")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "d", replacement = "140")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "e", replacement = "175")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "f", replacement = "210")) %>%
mutate(stump.dist.cm = as.integer(stump.dist.cm)) %>%
mutate(spot = sample) %>% # add column spot continual variable or categorical?
mutate(spot = str_replace_all(string = spot, pattern = "[i,J,a,b,c,x,y,z,0,4,5]", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "[A,B,C,D,E,F,G,H]", replacement = "")) %>%
mutate(scarp.dist = sample) %>% # add column scarp.dist continual variable or do I have to make it categorical
mutate(scarp.dist = str_replace_all(string = scarp.dist, pattern = "[A,B,C,D,E;F,G,H,i,J,N,0,1,2,3,4,5,6,7,8,9,a,b,c]", replacement = ""))
# save pat.wide and pat.long as .csv
write_csv(pat.wide, "data/pat.wide.csv")
write_csv(pat.long, "data/pat.long.csv")
# create ad.wide
ad.wide <- pat.wide %>%
bind_rows(summarise_all(., ~if(is.numeric(.)) sum(.) else "Alpha-Diversity"))
# R shows red wavy line under first and last (), whats wrong? As far as I can tell the code runs as it's supposed to
ad.wide <- filter(ad.wide, species == "Alpha-Diversity")
ad.wide
# create ad.long also containing columns: site, layer, stump.dist.cm, spot, scarp.dist
ad.long <- ad.wide %>%
pivot_longer(c(-1), names_to = "sample", values_to = "alpha.diversity") %>%
select(-species)
ad.long <- ad.long %>%
mutate(site = sample) %>% # add column site categorical variable
mutate(site = str_replace_all(string = site, pattern = "[0,1,2,3,4,5,a,b,c,x,y,z]", replacement = "")) %>%
mutate(layer = sample) %>% # add column layer categorical variable can I turn it into continual variable
mutate(layer = str_replace_all(string = layer, pattern = "[A,B,C,D,E,F,G,H,i,J,0,1,2,3,4,5]", replacement = "")) %>%
mutate(layer = str_replace_all(string = layer, pattern = "[x,y,z]", replacement = "b")) %>%
mutate(stump.dist.cm = sample) %>% # add column stump.dist.cm continual variable
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "[A,B,C,D,E,F,G,H,a,b,c,x,y,z]", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i1", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i2", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "i3", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J1", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J2", replacement = "")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "J3", replacement = "")) %>% # is there a shorter solution?
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "0", replacement = "a")) %>% # numbers -> letters -> distances
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "1", replacement = "b")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "2", replacement = "c")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "3", replacement = "d")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "4", replacement = "e")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "5", replacement = "f"))  %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "c", replacement = "105")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "a", replacement = "35")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "b", replacement = "70")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "d", replacement = "140")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "e", replacement = "175")) %>%
mutate(stump.dist.cm = str_replace_all(string = stump.dist.cm, pattern = "f", replacement = "210")) %>%
mutate(stump.dist.cm = as.integer(stump.dist.cm)) %>%
mutate(spot = sample) %>% # add column spot continual variable or categorical?
mutate(spot = str_replace_all(string = spot, pattern = "[i,J,a,b,c,x,y,z,0,4,5]", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "A3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "B3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "C3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "D3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "E3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "F3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "G3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H1", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H2", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "H3", replacement = "")) %>%
mutate(spot = str_replace_all(string = spot, pattern = "[A,B,C,D,E,F,G,H]", replacement = "")) %>%
mutate(scarp.dist = sample) %>% # add column scarp.dist continual variable or do I have to make it categorical
mutate(scarp.dist = str_replace_all(string = scarp.dist, pattern = "[A,B,C,D,E;F,G,H,i,J,N,0,1,2,3,4,5,6,7,8,9,a,b,c]", replacement = ""))
# save ad.wide and ad.long as .csv
write_csv(ad.wide, "data/ad.wide.csv")
write_csv(ad.long, "data/ad.long.csv")
library("vegan")
library("multcomp")
library("effects")
library("lme4")
# Artenzahl ~ distance sites A-F
ad.sites.a.to.f <- ad.long %>%
filter(site %in% c("A","B","C","D","E","F"))
# Interaktion n.s., also Modell ohne Interaktion
#m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer, family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
plot(m1b.a.f)
plot(allEffects(m1b.a.f))
# Modellvergleich
anova(m1.a.f, m1b.a.f, test = "Chisq")
# Artenzahl ~ distance sites A-F
ad.sites.a.to.f <- ad.long %>%
filter(site %in% c("A","B","C","D","E","F"))
# Interaktion n.s., also Modell ohne Interaktion
#m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer, family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
plot(m1b.a.f)
plot(allEffects(m1b.a.f))
# Interaktion n.s., also Modell ohne Interaktion
#m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
plot(m1b.a.f)
# Interaktion n.s., also Modell ohne Interaktion
#m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm * layer * site, family = "poisson",  data = ad.sites.a.to.f)
# Interaktion n.s., also Modell ohne Interaktion
#m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
plot(m1b.a.f)
plot(allEffects(m1b.a.f))
# Interaktion n.s., also Modell ohne Interaktion
m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
# Interaktion n.s., also Modell ohne Interaktion
m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + (site), family = "poisson",  data = ad.sites.a.to.f)
# Interaktion n.s., also Modell ohne Interaktion
m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + (1|site), family = "poisson",  data = ad.sites.a.to.f)
View(ad.sites.a.to.f)
summary(m1b.a.f)
# Interaktion n.s., also Modell ohne Interaktion
m1b.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + (1|site), family = "poisson",  data = ad.sites.a.to.f, control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
#m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer + site, family = "poisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
plot(m1b.a.f)
plot(allEffects(m1b.a.f))
# Artenzahl ~ distance sites A-F
ad.sites.a.to.f <- ad.long %>%
filter(site %in% c("A","B","C","D","E","F"))
# Interaktion n.s., also Modell ohne Interaktion
m1c.a.f <- glmer(alpha.diversity ~ stump.dist.cm + layer + (1|site), family = "poisson",  data = ad.sites.a.to.f)
summary(m1c.a.f)
plot(m1c.a.f)
plot(allEffects(m1c.a.f))
m1b.a.f <- glm(alpha.diversity ~ stump.dist.cm + layer, family = "quasipoisson",  data = ad.sites.a.to.f)
summary(m1b.a.f)
plot(m1b.a.f)
plot(allEffects(m1b.a.f))
library(swirl)
swirl()
source("http://rlab.blogs.uni-hamburg.de/RLabKurse/install_RLab.R")
source("http://rlab.blogs.uni-hamburg.de/RLabKurse/install_RLab.R")
swirl()
3
quit()
install.packages("bookdown")
setwd("C:\\Users\\Friedemann Goral\\OneDrive - GWDG\\Uni\\Lehre\\R-Kurs Bachelor\\Swirl")
library(swirlify)
new_lesson("Basics in R", "Vegetation Ecology and Multivariate Analysis")
swirl()
library(swirl)
swirl()
help.start()
1+1
1+1
info()
bye()
swirl
swirl()
swirl::install_course("R_Programmieren")
swirl()
bye()
source("http://rlab.blogs.uni-hamburg.de/RLabKurse/install_RLab.R")
swirl()
1+1
info()
main()
main()
bye()
swirl()
swirl()
swirl()
bye()
setwd("~/Vegetation_Ecology_and_Multivariate_Analysis/Basics_in_R")
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
log(y, base= 5)
x <- 1+2
y <- x*100
log(y, base= 5)
x*y
log(y)
log10(y)
log10(9)
log(9)
log10(1000)
y <- x*100 + 100
y <- x*100
y <- x*100
log10(y)
log(y)
log(y, base = 5)
y <- x*300 + 100
swirl()
1+2
y <- x+100
y <- x+100
y <- x+100
y <- x+100
y <- y+100
y <- y+100
y <- y+100
y <- y+100
y <- x*300 + 100
bye()
0/0
z[6]
z <- c(1.1, 9, 3.14)
z[6]
z[4]
z
c(z, 555, z)
z * 2 + 100
0/0
100/0
-1/0
